// Code generated by protoc-gen-go. DO NOT EDIT.
// source: content-feed/impression.proto

package ContentFeedService_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ContentType int32

const (
	ContentType_Unknown                     ContentType = 0
	ContentType_LISTING_CARD                ContentType = 1
	ContentType_BUMP_TOUCH_POINT            ContentType = 2
	ContentType_PROFILE_PROMOTION           ContentType = 3
	ContentType_PROMOTED_10                 ContentType = 4
	ContentType_TOP_SPOTLIGHT_10            ContentType = 5
	ContentType_BANNER                      ContentType = 6
	ContentType_DEDICATED_SPOTLIGHT_SECTION ContentType = 7
	ContentType_SHOUTOUT_PROMOTION          ContentType = 8
)

var ContentType_name = map[int32]string{
	0: "Unknown",
	1: "LISTING_CARD",
	2: "BUMP_TOUCH_POINT",
	3: "PROFILE_PROMOTION",
	4: "PROMOTED_10",
	5: "TOP_SPOTLIGHT_10",
	6: "BANNER",
	7: "DEDICATED_SPOTLIGHT_SECTION",
	8: "SHOUTOUT_PROMOTION",
}

var ContentType_value = map[string]int32{
	"Unknown":                     0,
	"LISTING_CARD":                1,
	"BUMP_TOUCH_POINT":            2,
	"PROFILE_PROMOTION":           3,
	"PROMOTED_10":                 4,
	"TOP_SPOTLIGHT_10":            5,
	"BANNER":                      6,
	"DEDICATED_SPOTLIGHT_SECTION": 7,
	"SHOUTOUT_PROMOTION":          8,
}

func (x ContentType) String() string {
	return proto.EnumName(ContentType_name, int32(x))
}

func (ContentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a2a9416171ade785, []int{0}
}

type ProductContentType int32

const (
	ProductContentType_UNKNOWN      ProductContentType = 0
	ProductContentType_PRODUCT_CARD ProductContentType = 1
)

var ProductContentType_name = map[int32]string{
	0: "UNKNOWN",
	1: "PRODUCT_CARD",
}

var ProductContentType_value = map[string]int32{
	"UNKNOWN":      0,
	"PRODUCT_CARD": 1,
}

func (x ProductContentType) String() string {
	return proto.EnumName(ProductContentType_name, int32(x))
}

func (ProductContentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a2a9416171ade785, []int{1}
}

// apCategory is the field record which AP category is
type ProductSearchImpression_APCategory int32

const (
	ProductSearchImpression_Unknown ProductSearchImpression_APCategory = 0
	ProductSearchImpression_All     ProductSearchImpression_APCategory = 1
	ProductSearchImpression_Mobile  ProductSearchImpression_APCategory = 2
	ProductSearchImpression_Luxury  ProductSearchImpression_APCategory = 3
	ProductSearchImpression_Sneaker ProductSearchImpression_APCategory = 4
)

var ProductSearchImpression_APCategory_name = map[int32]string{
	0: "Unknown",
	1: "All",
	2: "Mobile",
	3: "Luxury",
	4: "Sneaker",
}

var ProductSearchImpression_APCategory_value = map[string]int32{
	"Unknown": 0,
	"All":     1,
	"Mobile":  2,
	"Luxury":  3,
	"Sneaker": 4,
}

func (x ProductSearchImpression_APCategory) String() string {
	return proto.EnumName(ProductSearchImpression_APCategory_name, int32(x))
}

func (ProductSearchImpression_APCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a2a9416171ade785, []int{2, 0}
}

type RecImpression struct {
	TimeCreated  *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	EndpointName string               `protobuf:"bytes,2,opt,name=endpointName,proto3" json:"endpointName,omitempty"`
	// recSessionId is the same as the user keeps scrolling down
	RecSessionId string                `protobuf:"bytes,3,opt,name=recSessionId,proto3" json:"recSessionId,omitempty"`
	UserInfo     *ImpressionUserInfo   `protobuf:"bytes,4,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	ClientInfo   *ImpressionClientInfo `protobuf:"bytes,5,opt,name=clientInfo,proto3" json:"clientInfo,omitempty"`
	Contents     []*ImpressionContent  `protobuf:"bytes,6,rep,name=contents,proto3" json:"contents,omitempty"`
	FeatureFlags []*FeatureFlag        `protobuf:"bytes,7,rep,name=featureFlags,proto3" json:"featureFlags,omitempty"`
	ExpSegments  []*ExpSegment         `protobuf:"bytes,8,rep,name=ExpSegments,proto3" json:"ExpSegments,omitempty"`
	// from request
	Session              string   `protobuf:"bytes,9,opt,name=session,proto3" json:"session,omitempty"`
	ListingId            string   `protobuf:"bytes,10,opt,name=listingId,proto3" json:"listingId,omitempty"`
	CollectionId         string   `protobuf:"bytes,11,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	StartIndex           int32    `protobuf:"varint,12,opt,name=startIndex,proto3" json:"startIndex,omitempty"`
	CategoryIds          string   `protobuf:"bytes,13,opt,name=categoryIds,proto3" json:"categoryIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecImpression) Reset()         { *m = RecImpression{} }
func (m *RecImpression) String() string { return proto.CompactTextString(m) }
func (*RecImpression) ProtoMessage()    {}
func (*RecImpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a9416171ade785, []int{0}
}

func (m *RecImpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecImpression.Unmarshal(m, b)
}
func (m *RecImpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecImpression.Marshal(b, m, deterministic)
}
func (m *RecImpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecImpression.Merge(m, src)
}
func (m *RecImpression) XXX_Size() int {
	return xxx_messageInfo_RecImpression.Size(m)
}
func (m *RecImpression) XXX_DiscardUnknown() {
	xxx_messageInfo_RecImpression.DiscardUnknown(m)
}

var xxx_messageInfo_RecImpression proto.InternalMessageInfo

func (m *RecImpression) GetTimeCreated() *timestamp.Timestamp {
	if m != nil {
		return m.TimeCreated
	}
	return nil
}

func (m *RecImpression) GetEndpointName() string {
	if m != nil {
		return m.EndpointName
	}
	return ""
}

func (m *RecImpression) GetRecSessionId() string {
	if m != nil {
		return m.RecSessionId
	}
	return ""
}

func (m *RecImpression) GetUserInfo() *ImpressionUserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *RecImpression) GetClientInfo() *ImpressionClientInfo {
	if m != nil {
		return m.ClientInfo
	}
	return nil
}

func (m *RecImpression) GetContents() []*ImpressionContent {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *RecImpression) GetFeatureFlags() []*FeatureFlag {
	if m != nil {
		return m.FeatureFlags
	}
	return nil
}

func (m *RecImpression) GetExpSegments() []*ExpSegment {
	if m != nil {
		return m.ExpSegments
	}
	return nil
}

func (m *RecImpression) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *RecImpression) GetListingId() string {
	if m != nil {
		return m.ListingId
	}
	return ""
}

func (m *RecImpression) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *RecImpression) GetStartIndex() int32 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *RecImpression) GetCategoryIds() string {
	if m != nil {
		return m.CategoryIds
	}
	return ""
}

// impression for search endpoints
type SearchImpression struct {
	TimeCreated  *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	EndpointName string               `protobuf:"bytes,2,opt,name=endpointName,proto3" json:"endpointName,omitempty"`
	Placement    string               `protobuf:"bytes,3,opt,name=placement,proto3" json:"placement,omitempty"`
	// searchSessionId is the same as the user keeps scrolling down
	SearchSessionId string `protobuf:"bytes,4,opt,name=searchSessionId,proto3" json:"searchSessionId,omitempty"`
	// Response
	Contents             []*ImpressionContent                           `protobuf:"bytes,5,rep,name=contents,proto3" json:"contents,omitempty"`
	AggregateCount       int32                                          `protobuf:"varint,24,opt,name=aggregateCount,proto3" json:"aggregateCount,omitempty"`
	TotalCount           int32                                          `protobuf:"varint,25,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	HasMore              bool                                           `protobuf:"varint,26,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	AppliedSearchContext *SearchListingsResponseV4_AppliedSearchContext `protobuf:"bytes,27,opt,name=appliedSearchContext,proto3" json:"appliedSearchContext,omitempty"`
	Suggestions          *SearchListingsResponseV4_Suggestions          `protobuf:"bytes,33,opt,name=suggestions,proto3" json:"suggestions,omitempty"`
	// Request
	UserInfo            *ImpressionUserInfo                          `protobuf:"bytes,8,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	ClientInfo          *ImpressionClientInfo                        `protobuf:"bytes,9,opt,name=clientInfo,proto3" json:"clientInfo,omitempty"`
	Count               *wrappers.Int32Value                         `protobuf:"bytes,11,opt,name=count,proto3" json:"count,omitempty"`
	QueryString         string                                       `protobuf:"bytes,15,opt,name=queryString,proto3" json:"queryString,omitempty"`
	CountryId           *wrappers.Int64Value                         `protobuf:"bytes,16,opt,name=countryId,proto3" json:"countryId,omitempty"`
	Platform            string                                       `protobuf:"bytes,17,opt,name=platform,proto3" json:"platform,omitempty"`
	Locale              string                                       `protobuf:"bytes,18,opt,name=locale,proto3" json:"locale,omitempty"`
	EnforceQuery        bool                                         `protobuf:"varint,28,opt,name=enforceQuery,proto3" json:"enforceQuery,omitempty"`
	SearchFilterOptions *SearchListingsRequestV4_SearchFilterOptions `protobuf:"bytes,29,opt,name=searchFilterOptions,proto3" json:"searchFilterOptions,omitempty"`
	SortParamV4         *SortParamV4                                 `protobuf:"bytes,30,opt,name=sortParamV4,proto3" json:"sortParamV4,omitempty"`
	FilterParamsV4      []*FilterParamV4                             `protobuf:"bytes,31,rep,name=filterParamsV4,proto3" json:"filterParamsV4,omitempty"`
	// other important parameters carried as part of URL, such as user_id in profile listings, spc_id in spc listings.
	Params      map[string]string `protobuf:"bytes,32,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsFirstPage bool              `protobuf:"varint,36,opt,name=isFirstPage,proto3" json:"isFirstPage,omitempty"`
	// Legacy 3.x request params. Waiting for being deprecated.
	SortParam    *SortParam     `protobuf:"bytes,13,opt,name=sortParam,proto3" json:"sortParam,omitempty"`
	FilterParams []*FilterParam `protobuf:"bytes,14,rep,name=filterParams,proto3" json:"filterParams,omitempty"`
	//In order to identify unique users, Google created ‘GAID’ (Google Advertising ID), and Apple created ‘IDFA’ (Identifier For Advertising).
	AdvertisingId string `protobuf:"bytes,19,opt,name=advertisingId,proto3" json:"advertisingId,omitempty"`
	//if in the OS settings the user has enabled the limit ad tracking, then the OS will return true to us when we call to retrieve that info from `AdvertisingIdentifier`
	DoNotTrack  bool      `protobuf:"varint,20,opt,name=doNotTrack,proto3" json:"doNotTrack,omitempty"`
	AdVersion   AdVersion `protobuf:"varint,21,opt,name=adVersion,proto3,enum=ContentFeedService_proto.AdVersion" json:"adVersion,omitempty"`
	SoldSlot    bool      `protobuf:"varint,22,opt,name=soldSlot,proto3" json:"soldSlot,omitempty"`
	IgnoreCount bool      `protobuf:"varint,23,opt,name=ignoreCount,proto3" json:"ignoreCount,omitempty"`
	// Inspection
	FeatureFlags []*FeatureFlag `protobuf:"bytes,6,rep,name=featureFlags,proto3" json:"featureFlags,omitempty"`
	ExpSegments  []*ExpSegment  `protobuf:"bytes,7,rep,name=expSegments,proto3" json:"expSegments,omitempty"`
	// Whether best-match fallback has happened and which fallback algorithm is used. Empty if no fallback
	BestMatchFallback string `protobuf:"bytes,34,opt,name=bestMatchFallback,proto3" json:"bestMatchFallback,omitempty"`
	// Result count by high-precision algorithm. Only available in keyword search case
	HpCount              *wrappers.Int32Value `protobuf:"bytes,35,opt,name=hpCount,proto3" json:"hpCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SearchImpression) Reset()         { *m = SearchImpression{} }
func (m *SearchImpression) String() string { return proto.CompactTextString(m) }
func (*SearchImpression) ProtoMessage()    {}
func (*SearchImpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a9416171ade785, []int{1}
}

func (m *SearchImpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchImpression.Unmarshal(m, b)
}
func (m *SearchImpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchImpression.Marshal(b, m, deterministic)
}
func (m *SearchImpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchImpression.Merge(m, src)
}
func (m *SearchImpression) XXX_Size() int {
	return xxx_messageInfo_SearchImpression.Size(m)
}
func (m *SearchImpression) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchImpression.DiscardUnknown(m)
}

var xxx_messageInfo_SearchImpression proto.InternalMessageInfo

func (m *SearchImpression) GetTimeCreated() *timestamp.Timestamp {
	if m != nil {
		return m.TimeCreated
	}
	return nil
}

func (m *SearchImpression) GetEndpointName() string {
	if m != nil {
		return m.EndpointName
	}
	return ""
}

func (m *SearchImpression) GetPlacement() string {
	if m != nil {
		return m.Placement
	}
	return ""
}

func (m *SearchImpression) GetSearchSessionId() string {
	if m != nil {
		return m.SearchSessionId
	}
	return ""
}

func (m *SearchImpression) GetContents() []*ImpressionContent {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *SearchImpression) GetAggregateCount() int32 {
	if m != nil {
		return m.AggregateCount
	}
	return 0
}

func (m *SearchImpression) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *SearchImpression) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *SearchImpression) GetAppliedSearchContext() *SearchListingsResponseV4_AppliedSearchContext {
	if m != nil {
		return m.AppliedSearchContext
	}
	return nil
}

func (m *SearchImpression) GetSuggestions() *SearchListingsResponseV4_Suggestions {
	if m != nil {
		return m.Suggestions
	}
	return nil
}

func (m *SearchImpression) GetUserInfo() *ImpressionUserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *SearchImpression) GetClientInfo() *ImpressionClientInfo {
	if m != nil {
		return m.ClientInfo
	}
	return nil
}

func (m *SearchImpression) GetCount() *wrappers.Int32Value {
	if m != nil {
		return m.Count
	}
	return nil
}

func (m *SearchImpression) GetQueryString() string {
	if m != nil {
		return m.QueryString
	}
	return ""
}

func (m *SearchImpression) GetCountryId() *wrappers.Int64Value {
	if m != nil {
		return m.CountryId
	}
	return nil
}

func (m *SearchImpression) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *SearchImpression) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *SearchImpression) GetEnforceQuery() bool {
	if m != nil {
		return m.EnforceQuery
	}
	return false
}

func (m *SearchImpression) GetSearchFilterOptions() *SearchListingsRequestV4_SearchFilterOptions {
	if m != nil {
		return m.SearchFilterOptions
	}
	return nil
}

func (m *SearchImpression) GetSortParamV4() *SortParamV4 {
	if m != nil {
		return m.SortParamV4
	}
	return nil
}

func (m *SearchImpression) GetFilterParamsV4() []*FilterParamV4 {
	if m != nil {
		return m.FilterParamsV4
	}
	return nil
}

func (m *SearchImpression) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *SearchImpression) GetIsFirstPage() bool {
	if m != nil {
		return m.IsFirstPage
	}
	return false
}

func (m *SearchImpression) GetSortParam() *SortParam {
	if m != nil {
		return m.SortParam
	}
	return nil
}

func (m *SearchImpression) GetFilterParams() []*FilterParam {
	if m != nil {
		return m.FilterParams
	}
	return nil
}

func (m *SearchImpression) GetAdvertisingId() string {
	if m != nil {
		return m.AdvertisingId
	}
	return ""
}

func (m *SearchImpression) GetDoNotTrack() bool {
	if m != nil {
		return m.DoNotTrack
	}
	return false
}

func (m *SearchImpression) GetAdVersion() AdVersion {
	if m != nil {
		return m.AdVersion
	}
	return AdVersion_DEFAULT_AD_VERSION
}

func (m *SearchImpression) GetSoldSlot() bool {
	if m != nil {
		return m.SoldSlot
	}
	return false
}

func (m *SearchImpression) GetIgnoreCount() bool {
	if m != nil {
		return m.IgnoreCount
	}
	return false
}

func (m *SearchImpression) GetFeatureFlags() []*FeatureFlag {
	if m != nil {
		return m.FeatureFlags
	}
	return nil
}

func (m *SearchImpression) GetExpSegments() []*ExpSegment {
	if m != nil {
		return m.ExpSegments
	}
	return nil
}

func (m *SearchImpression) GetBestMatchFallback() string {
	if m != nil {
		return m.BestMatchFallback
	}
	return ""
}

func (m *SearchImpression) GetHpCount() *wrappers.Int32Value {
	if m != nil {
		return m.HpCount
	}
	return nil
}

// impression for product search endpoints
type ProductSearchImpression struct {
	TimeCreated  *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	EndpointName string               `protobuf:"bytes,2,opt,name=endpointName,proto3" json:"endpointName,omitempty"`
	Placement    string               `protobuf:"bytes,3,opt,name=placement,proto3" json:"placement,omitempty"`
	// searchSessionId is the same as the user keeps scrolling down
	SearchSessionId string                             `protobuf:"bytes,4,opt,name=searchSessionId,proto3" json:"searchSessionId,omitempty"`
	ApCategory      ProductSearchImpression_APCategory `protobuf:"varint,21,opt,name=apCategory,proto3,enum=ContentFeedService_proto.ProductSearchImpression_APCategory" json:"apCategory,omitempty"`
	// Response
	Contents       []*ProductImpressionContent `protobuf:"bytes,5,rep,name=contents,proto3" json:"contents,omitempty"`
	AggregateCount int32                       `protobuf:"varint,6,opt,name=aggregateCount,proto3" json:"aggregateCount,omitempty"`
	TotalCount     int32                       `protobuf:"varint,7,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	HasMore        bool                        `protobuf:"varint,8,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	// Request
	UserInfo       *ImpressionUserInfo                    `protobuf:"bytes,9,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	ClientInfo     *ImpressionClientInfo                  `protobuf:"bytes,10,opt,name=clientInfo,proto3" json:"clientInfo,omitempty"`
	Count          *wrappers.Int32Value                   `protobuf:"bytes,11,opt,name=count,proto3" json:"count,omitempty"`
	QueryString    string                                 `protobuf:"bytes,12,opt,name=queryString,proto3" json:"queryString,omitempty"`
	CountryId      *wrappers.Int64Value                   `protobuf:"bytes,13,opt,name=countryId,proto3" json:"countryId,omitempty"`
	Locale         string                                 `protobuf:"bytes,14,opt,name=locale,proto3" json:"locale,omitempty"`
	FilterParamsV4 []*FilterParamV4                       `protobuf:"bytes,15,rep,name=filterParamsV4,proto3" json:"filterParamsV4,omitempty"`
	IsFirstPage    bool                                   `protobuf:"varint,16,opt,name=isFirstPage,proto3" json:"isFirstPage,omitempty"`
	UiInfoOptions  *SearchProductsRequestV1_UIInfoOptions `protobuf:"bytes,17,opt,name=uiInfoOptions,proto3" json:"uiInfoOptions,omitempty"`
	// Inspection
	FeatureFlags         []*FeatureFlag `protobuf:"bytes,19,rep,name=featureFlags,proto3" json:"featureFlags,omitempty"`
	ExpSegments          []*ExpSegment  `protobuf:"bytes,20,rep,name=expSegments,proto3" json:"expSegments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ProductSearchImpression) Reset()         { *m = ProductSearchImpression{} }
func (m *ProductSearchImpression) String() string { return proto.CompactTextString(m) }
func (*ProductSearchImpression) ProtoMessage()    {}
func (*ProductSearchImpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a9416171ade785, []int{2}
}

func (m *ProductSearchImpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductSearchImpression.Unmarshal(m, b)
}
func (m *ProductSearchImpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductSearchImpression.Marshal(b, m, deterministic)
}
func (m *ProductSearchImpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductSearchImpression.Merge(m, src)
}
func (m *ProductSearchImpression) XXX_Size() int {
	return xxx_messageInfo_ProductSearchImpression.Size(m)
}
func (m *ProductSearchImpression) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductSearchImpression.DiscardUnknown(m)
}

var xxx_messageInfo_ProductSearchImpression proto.InternalMessageInfo

func (m *ProductSearchImpression) GetTimeCreated() *timestamp.Timestamp {
	if m != nil {
		return m.TimeCreated
	}
	return nil
}

func (m *ProductSearchImpression) GetEndpointName() string {
	if m != nil {
		return m.EndpointName
	}
	return ""
}

func (m *ProductSearchImpression) GetPlacement() string {
	if m != nil {
		return m.Placement
	}
	return ""
}

func (m *ProductSearchImpression) GetSearchSessionId() string {
	if m != nil {
		return m.SearchSessionId
	}
	return ""
}

func (m *ProductSearchImpression) GetApCategory() ProductSearchImpression_APCategory {
	if m != nil {
		return m.ApCategory
	}
	return ProductSearchImpression_Unknown
}

func (m *ProductSearchImpression) GetContents() []*ProductImpressionContent {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *ProductSearchImpression) GetAggregateCount() int32 {
	if m != nil {
		return m.AggregateCount
	}
	return 0
}

func (m *ProductSearchImpression) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ProductSearchImpression) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *ProductSearchImpression) GetUserInfo() *ImpressionUserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *ProductSearchImpression) GetClientInfo() *ImpressionClientInfo {
	if m != nil {
		return m.ClientInfo
	}
	return nil
}

func (m *ProductSearchImpression) GetCount() *wrappers.Int32Value {
	if m != nil {
		return m.Count
	}
	return nil
}

func (m *ProductSearchImpression) GetQueryString() string {
	if m != nil {
		return m.QueryString
	}
	return ""
}

func (m *ProductSearchImpression) GetCountryId() *wrappers.Int64Value {
	if m != nil {
		return m.CountryId
	}
	return nil
}

func (m *ProductSearchImpression) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *ProductSearchImpression) GetFilterParamsV4() []*FilterParamV4 {
	if m != nil {
		return m.FilterParamsV4
	}
	return nil
}

func (m *ProductSearchImpression) GetIsFirstPage() bool {
	if m != nil {
		return m.IsFirstPage
	}
	return false
}

func (m *ProductSearchImpression) GetUiInfoOptions() *SearchProductsRequestV1_UIInfoOptions {
	if m != nil {
		return m.UiInfoOptions
	}
	return nil
}

func (m *ProductSearchImpression) GetFeatureFlags() []*FeatureFlag {
	if m != nil {
		return m.FeatureFlags
	}
	return nil
}

func (m *ProductSearchImpression) GetExpSegments() []*ExpSegment {
	if m != nil {
		return m.ExpSegments
	}
	return nil
}

type ImpressionUserInfo struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	CountryId            string   `protobuf:"bytes,2,opt,name=countryId,proto3" json:"countryId,omitempty"`
	Admin                bool     `protobuf:"varint,3,opt,name=admin,proto3" json:"admin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImpressionUserInfo) Reset()         { *m = ImpressionUserInfo{} }
func (m *ImpressionUserInfo) String() string { return proto.CompactTextString(m) }
func (*ImpressionUserInfo) ProtoMessage()    {}
func (*ImpressionUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a9416171ade785, []int{3}
}

func (m *ImpressionUserInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImpressionUserInfo.Unmarshal(m, b)
}
func (m *ImpressionUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImpressionUserInfo.Marshal(b, m, deterministic)
}
func (m *ImpressionUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImpressionUserInfo.Merge(m, src)
}
func (m *ImpressionUserInfo) XXX_Size() int {
	return xxx_messageInfo_ImpressionUserInfo.Size(m)
}
func (m *ImpressionUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ImpressionUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ImpressionUserInfo proto.InternalMessageInfo

func (m *ImpressionUserInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ImpressionUserInfo) GetCountryId() string {
	if m != nil {
		return m.CountryId
	}
	return ""
}

func (m *ImpressionUserInfo) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

type ImpressionClientInfo struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	RequestId            string   `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Build                int32    `protobuf:"varint,3,opt,name=build,proto3" json:"build,omitempty"`
	Platform             string   `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImpressionClientInfo) Reset()         { *m = ImpressionClientInfo{} }
func (m *ImpressionClientInfo) String() string { return proto.CompactTextString(m) }
func (*ImpressionClientInfo) ProtoMessage()    {}
func (*ImpressionClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a9416171ade785, []int{4}
}

func (m *ImpressionClientInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImpressionClientInfo.Unmarshal(m, b)
}
func (m *ImpressionClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImpressionClientInfo.Marshal(b, m, deterministic)
}
func (m *ImpressionClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImpressionClientInfo.Merge(m, src)
}
func (m *ImpressionClientInfo) XXX_Size() int {
	return xxx_messageInfo_ImpressionClientInfo.Size(m)
}
func (m *ImpressionClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ImpressionClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ImpressionClientInfo proto.InternalMessageInfo

func (m *ImpressionClientInfo) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *ImpressionClientInfo) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ImpressionClientInfo) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *ImpressionClientInfo) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type ImpressionContent struct {
	ContentType ContentType `protobuf:"varint,1,opt,name=contentType,proto3,enum=ContentFeedService_proto.ContentType" json:"contentType,omitempty"`
	Index       int32       `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	ListingId   string      `protobuf:"bytes,3,opt,name=listingId,proto3" json:"listingId,omitempty"`
	PromotionId string      `protobuf:"bytes,4,opt,name=promotionId,proto3" json:"promotionId,omitempty"`
	SellerId    string      `protobuf:"bytes,5,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	Status      string      `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Citizenship string      `protobuf:"bytes,7,opt,name=citizenship,proto3" json:"citizenship,omitempty"`
	// a string of JSON object that contains the scores and weights for signal reranking
	RankingScore string `protobuf:"bytes,8,opt,name=rankingScore,proto3" json:"rankingScore,omitempty"`
	// reserve indice 5-9 for potential new attributes for diff content
	Explain              string   `protobuf:"bytes,10,opt,name=explain,proto3" json:"explain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImpressionContent) Reset()         { *m = ImpressionContent{} }
func (m *ImpressionContent) String() string { return proto.CompactTextString(m) }
func (*ImpressionContent) ProtoMessage()    {}
func (*ImpressionContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a9416171ade785, []int{5}
}

func (m *ImpressionContent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImpressionContent.Unmarshal(m, b)
}
func (m *ImpressionContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImpressionContent.Marshal(b, m, deterministic)
}
func (m *ImpressionContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImpressionContent.Merge(m, src)
}
func (m *ImpressionContent) XXX_Size() int {
	return xxx_messageInfo_ImpressionContent.Size(m)
}
func (m *ImpressionContent) XXX_DiscardUnknown() {
	xxx_messageInfo_ImpressionContent.DiscardUnknown(m)
}

var xxx_messageInfo_ImpressionContent proto.InternalMessageInfo

func (m *ImpressionContent) GetContentType() ContentType {
	if m != nil {
		return m.ContentType
	}
	return ContentType_Unknown
}

func (m *ImpressionContent) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ImpressionContent) GetListingId() string {
	if m != nil {
		return m.ListingId
	}
	return ""
}

func (m *ImpressionContent) GetPromotionId() string {
	if m != nil {
		return m.PromotionId
	}
	return ""
}

func (m *ImpressionContent) GetSellerId() string {
	if m != nil {
		return m.SellerId
	}
	return ""
}

func (m *ImpressionContent) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ImpressionContent) GetCitizenship() string {
	if m != nil {
		return m.Citizenship
	}
	return ""
}

func (m *ImpressionContent) GetRankingScore() string {
	if m != nil {
		return m.RankingScore
	}
	return ""
}

func (m *ImpressionContent) GetExplain() string {
	if m != nil {
		return m.Explain
	}
	return ""
}

type ProductImpressionContent struct {
	ContentType          ProductContentType `protobuf:"varint,1,opt,name=contentType,proto3,enum=ContentFeedService_proto.ProductContentType" json:"contentType,omitempty"`
	Index                int32              `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	DefaultListingId     string             `protobuf:"bytes,3,opt,name=defaultListingId,proto3" json:"defaultListingId,omitempty"`
	CgProductId          string             `protobuf:"bytes,4,opt,name=cgProductId,proto3" json:"cgProductId,omitempty"`
	CgProductVariantId   string             `protobuf:"bytes,5,opt,name=cgProductVariantId,proto3" json:"cgProductVariantId,omitempty"`
	Explain              string             `protobuf:"bytes,6,opt,name=explain,proto3" json:"explain,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ProductImpressionContent) Reset()         { *m = ProductImpressionContent{} }
func (m *ProductImpressionContent) String() string { return proto.CompactTextString(m) }
func (*ProductImpressionContent) ProtoMessage()    {}
func (*ProductImpressionContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2a9416171ade785, []int{6}
}

func (m *ProductImpressionContent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductImpressionContent.Unmarshal(m, b)
}
func (m *ProductImpressionContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductImpressionContent.Marshal(b, m, deterministic)
}
func (m *ProductImpressionContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductImpressionContent.Merge(m, src)
}
func (m *ProductImpressionContent) XXX_Size() int {
	return xxx_messageInfo_ProductImpressionContent.Size(m)
}
func (m *ProductImpressionContent) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductImpressionContent.DiscardUnknown(m)
}

var xxx_messageInfo_ProductImpressionContent proto.InternalMessageInfo

func (m *ProductImpressionContent) GetContentType() ProductContentType {
	if m != nil {
		return m.ContentType
	}
	return ProductContentType_UNKNOWN
}

func (m *ProductImpressionContent) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ProductImpressionContent) GetDefaultListingId() string {
	if m != nil {
		return m.DefaultListingId
	}
	return ""
}

func (m *ProductImpressionContent) GetCgProductId() string {
	if m != nil {
		return m.CgProductId
	}
	return ""
}

func (m *ProductImpressionContent) GetCgProductVariantId() string {
	if m != nil {
		return m.CgProductVariantId
	}
	return ""
}

func (m *ProductImpressionContent) GetExplain() string {
	if m != nil {
		return m.Explain
	}
	return ""
}

func init() {
	proto.RegisterEnum("ContentFeedService_proto.ContentType", ContentType_name, ContentType_value)
	proto.RegisterEnum("ContentFeedService_proto.ProductContentType", ProductContentType_name, ProductContentType_value)
	proto.RegisterEnum("ContentFeedService_proto.ProductSearchImpression_APCategory", ProductSearchImpression_APCategory_name, ProductSearchImpression_APCategory_value)
	proto.RegisterType((*RecImpression)(nil), "ContentFeedService_proto.RecImpression")
	proto.RegisterType((*SearchImpression)(nil), "ContentFeedService_proto.SearchImpression")
	proto.RegisterMapType((map[string]string)(nil), "ContentFeedService_proto.SearchImpression.ParamsEntry")
	proto.RegisterType((*ProductSearchImpression)(nil), "ContentFeedService_proto.ProductSearchImpression")
	proto.RegisterType((*ImpressionUserInfo)(nil), "ContentFeedService_proto.ImpressionUserInfo")
	proto.RegisterType((*ImpressionClientInfo)(nil), "ContentFeedService_proto.ImpressionClientInfo")
	proto.RegisterType((*ImpressionContent)(nil), "ContentFeedService_proto.ImpressionContent")
	proto.RegisterType((*ProductImpressionContent)(nil), "ContentFeedService_proto.ProductImpressionContent")
}

func init() { proto.RegisterFile("content-feed/impression.proto", fileDescriptor_a2a9416171ade785) }

var fileDescriptor_a2a9416171ade785 = []byte{
	// 1674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xdd, 0x52, 0x1b, 0xc9,
	0x15, 0x8e, 0x00, 0x09, 0xe9, 0x88, 0x9f, 0xa1, 0xcd, 0xda, 0xb3, 0xd8, 0x6b, 0x6b, 0xb5, 0x4e,
	0x42, 0x39, 0x5e, 0x11, 0x63, 0xb2, 0x95, 0x4d, 0xb6, 0x92, 0xc2, 0xe2, 0xc7, 0xaa, 0x80, 0xa4,
	0xb4, 0x04, 0xa9, 0x4a, 0xa5, 0x4a, 0xdb, 0xcc, 0x34, 0xc3, 0x14, 0xa3, 0xe9, 0xd9, 0xee, 0x1e,
	0x1b, 0x92, 0xdb, 0x3c, 0x44, 0x5e, 0x21, 0x0f, 0x92, 0xdc, 0xe4, 0x3a, 0xef, 0x93, 0xea, 0xee,
	0x91, 0x66, 0x06, 0x21, 0xc0, 0xc6, 0x95, 0x4a, 0xae, 0xd0, 0x39, 0x7d, 0xce, 0xd7, 0x7d, 0x7e,
	0xfa, 0x7c, 0x3d, 0xc0, 0x17, 0x0e, 0x0b, 0x25, 0x0d, 0xe5, 0xd7, 0xa7, 0x94, 0xba, 0x1b, 0xfe,
	0x30, 0xe2, 0x54, 0x08, 0x9f, 0x85, 0x8d, 0x88, 0x33, 0xc9, 0x90, 0xdd, 0x34, 0xcb, 0x7b, 0x94,
	0xba, 0x3d, 0xca, 0xdf, 0xf9, 0x0e, 0x1d, 0xe8, 0x95, 0xb5, 0xcf, 0x73, 0x8e, 0x0e, 0x1b, 0x0e,
	0x47, 0x4e, 0x6b, 0x4f, 0x72, 0x4b, 0x82, 0x12, 0xee, 0x9c, 0x0d, 0xde, 0xbd, 0xbe, 0x71, 0x75,
	0x2b, 0x59, 0x7d, 0x94, 0x87, 0x25, 0x52, 0x24, 0x0b, 0x5f, 0xe6, 0x16, 0x22, 0xce, 0xdc, 0xd8,
	0x91, 0x03, 0xe3, 0x9e, 0x98, 0x3c, 0xf5, 0x18, 0xf3, 0x02, 0xba, 0xa1, 0xa5, 0x93, 0xf8, 0x74,
	0xe3, 0x3d, 0x27, 0x51, 0x44, 0xf9, 0x08, 0xe2, 0xd9, 0xd5, 0x75, 0xe9, 0x0f, 0xa9, 0x90, 0x64,
	0x18, 0x19, 0x83, 0xfa, 0xdf, 0x8b, 0xb0, 0x88, 0xa9, 0xd3, 0x1a, 0x67, 0x01, 0x7d, 0x07, 0x55,
	0x65, 0xd4, 0xe4, 0x94, 0x48, 0xea, 0xda, 0x85, 0x5a, 0x61, 0xbd, 0xba, 0xb9, 0xd6, 0x30, 0x40,
	0x8d, 0x11, 0x50, 0xa3, 0x3f, 0x02, 0xc2, 0x59, 0x73, 0x54, 0x87, 0x05, 0x1a, 0xba, 0x11, 0xf3,
	0x43, 0xd9, 0x26, 0x43, 0x6a, 0xcf, 0xd4, 0x0a, 0xeb, 0x15, 0x9c, 0xd3, 0x29, 0x1b, 0x4e, 0x9d,
	0x9e, 0xd9, 0xaf, 0xe5, 0xda, 0xb3, 0xc6, 0x26, 0xab, 0x43, 0x6f, 0xa1, 0x1c, 0x0b, 0xca, 0x5b,
	0xe1, 0x29, 0xb3, 0xe7, 0xf4, 0x11, 0x5e, 0x36, 0xa6, 0x15, 0xa6, 0x91, 0x9e, 0xfe, 0x28, 0xf1,
	0xc1, 0x63, 0x6f, 0xd4, 0x06, 0x70, 0x02, 0x9f, 0x86, 0x52, 0x63, 0x15, 0x35, 0x56, 0xe3, 0x2e,
	0x58, 0xcd, 0xb1, 0x17, 0xce, 0x20, 0xa0, 0x7d, 0x28, 0x27, 0x75, 0x11, 0x76, 0xa9, 0x36, 0xbb,
	0x5e, 0xdd, 0xfc, 0xd9, 0x9d, 0xd0, 0x8c, 0x09, 0x1e, 0x3b, 0xa3, 0x16, 0x2c, 0x9c, 0x52, 0x22,
	0x63, 0x4e, 0xf7, 0x02, 0xe2, 0x09, 0x7b, 0x5e, 0x83, 0xfd, 0x78, 0x3a, 0xd8, 0x5e, 0x6a, 0x8d,
	0x73, 0xae, 0x68, 0x0f, 0xaa, 0xbb, 0x17, 0x51, 0x8f, 0x7a, 0x43, 0x7d, 0xac, 0xb2, 0x46, 0x7a,
	0x3e, 0x1d, 0x29, 0x35, 0xc6, 0x59, 0x47, 0x64, 0xc3, 0xbc, 0x30, 0xc7, 0xb5, 0x2b, 0xba, 0x28,
	0x23, 0x11, 0x3d, 0x81, 0x4a, 0xe0, 0x0b, 0xe9, 0x87, 0x5e, 0xcb, 0xb5, 0x41, 0xaf, 0xa5, 0x0a,
	0x55, 0x51, 0x87, 0x05, 0x01, 0x75, 0xa4, 0xa9, 0x68, 0xd5, 0x54, 0x34, 0xab, 0x43, 0x4f, 0x01,
	0x84, 0x24, 0x5c, 0xb6, 0x42, 0x97, 0x5e, 0xd8, 0x0b, 0xb5, 0xc2, 0x7a, 0x11, 0x67, 0x34, 0xa8,
	0x06, 0x55, 0x87, 0x48, 0xea, 0x31, 0x7e, 0xd9, 0x72, 0x85, 0xbd, 0xa8, 0x21, 0xb2, 0xaa, 0xfa,
	0xbf, 0x97, 0xc1, 0xea, 0xe9, 0xee, 0xff, 0xaf, 0xb6, 0xeb, 0x13, 0xa8, 0x44, 0x01, 0x71, 0xa8,
	0x4a, 0x51, 0xd2, 0xab, 0xa9, 0x02, 0xad, 0xc3, 0xb2, 0xb9, 0x91, 0x69, 0x3f, 0xcf, 0x69, 0x9b,
	0xab, 0xea, 0x5c, 0xe3, 0x14, 0xef, 0xd3, 0x38, 0x3f, 0x81, 0x25, 0xe2, 0x79, 0x9c, 0x7a, 0x44,
	0xd2, 0x26, 0x8b, 0x43, 0x69, 0xdb, 0x3a, 0x9b, 0x57, 0xb4, 0x2a, 0xe3, 0x92, 0x49, 0x12, 0x18,
	0x9b, 0xcf, 0x4d, 0xc6, 0x53, 0x8d, 0xaa, 0xf6, 0x19, 0x11, 0x87, 0x8c, 0x53, 0x7b, 0xad, 0x56,
	0x58, 0x2f, 0xe3, 0x91, 0x88, 0xfe, 0x02, 0xab, 0x24, 0x8a, 0x02, 0x5f, 0x9d, 0x4a, 0x05, 0xa1,
	0xcf, 0x70, 0x21, 0xed, 0xc7, 0x3a, 0xbb, 0xfb, 0xd3, 0x8f, 0x6d, 0xcc, 0x0f, 0x4c, 0x63, 0x08,
	0x4c, 0x45, 0xc4, 0x42, 0x41, 0x8f, 0xb7, 0x1a, 0xdb, 0xd7, 0xc0, 0xe1, 0x6b, 0x37, 0x41, 0xdf,
	0x43, 0x55, 0xc4, 0x9e, 0x47, 0x85, 0x6a, 0x1c, 0x61, 0x7f, 0xa9, 0xf7, 0xfc, 0xcd, 0x47, 0xec,
	0xd9, 0x4b, 0x51, 0x70, 0x16, 0x32, 0x37, 0x5c, 0xca, 0x9f, 0x70, 0xb8, 0x54, 0xee, 0x3d, 0x5c,
	0x5e, 0x41, 0xd1, 0xd1, 0xd5, 0xaa, 0x6a, 0xa8, 0xc7, 0x13, 0x7d, 0xdc, 0x0a, 0xe5, 0xeb, 0xcd,
	0x63, 0x12, 0xc4, 0x14, 0x1b, 0x4b, 0x75, 0x6f, 0x7e, 0x88, 0x29, 0xbf, 0xec, 0x49, 0xee, 0x87,
	0x9e, 0xbd, 0x6c, 0xee, 0x4d, 0x46, 0x85, 0xbe, 0x85, 0x8a, 0x36, 0x55, 0xb7, 0xc8, 0xb6, 0xa6,
	0x03, 0x7f, 0xb3, 0x65, 0x80, 0x53, 0x6b, 0xb4, 0x06, 0xe5, 0x28, 0x20, 0xf2, 0x94, 0xf1, 0xa1,
	0xbd, 0xa2, 0x91, 0xc7, 0x32, 0x7a, 0x08, 0xa5, 0x80, 0x39, 0x24, 0xa0, 0x36, 0xd2, 0x2b, 0x89,
	0x64, 0xee, 0xd4, 0x29, 0xe3, 0x0e, 0xfd, 0xbd, 0x3a, 0x84, 0xfd, 0x44, 0xf7, 0x56, 0x4e, 0x87,
	0xde, 0xc3, 0x03, 0x73, 0x3d, 0xf6, 0xfc, 0x40, 0x52, 0xde, 0x89, 0x4c, 0xad, 0xbf, 0xd0, 0x87,
	0xdb, 0xbd, 0x7b, 0xad, 0x7f, 0x88, 0xa9, 0x90, 0xaa, 0xd4, 0x93, 0x60, 0xf8, 0xba, 0x1d, 0xd0,
	0x3e, 0x54, 0x05, 0xe3, 0xb2, 0x4b, 0x38, 0x19, 0x1e, 0x6f, 0xd9, 0x4f, 0xf5, 0x86, 0x37, 0xcc,
	0xdc, 0x5e, 0x6a, 0x8c, 0xb3, 0x9e, 0xa8, 0x03, 0x4b, 0xa7, 0x1a, 0x59, 0x2b, 0xc4, 0xf1, 0x96,
	0xfd, 0x4c, 0xdf, 0xe9, 0x9f, 0xde, 0x30, 0xbf, 0x53, 0xfb, 0xe3, 0x2d, 0x7c, 0xc5, 0x1d, 0xb5,
	0xa1, 0x14, 0xe9, 0xdf, 0x76, 0x4d, 0x03, 0x7d, 0x73, 0x5b, 0x16, 0xd2, 0x66, 0x6a, 0x18, 0x90,
	0x5d, 0x55, 0x34, 0x9c, 0xa0, 0xa8, 0xbe, 0xf0, 0xc5, 0x9e, 0xcf, 0x85, 0xec, 0x12, 0x8f, 0xda,
	0xcf, 0x75, 0x15, 0xb2, 0x2a, 0xb4, 0x0d, 0x95, 0x71, 0x44, 0x7a, 0xde, 0x56, 0x37, 0xbf, 0xba,
	0x43, 0x26, 0x70, 0xea, 0xa5, 0x39, 0x2c, 0x13, 0x86, 0xbd, 0x74, 0x2b, 0x87, 0xa5, 0xd6, 0x38,
	0xe7, 0x8a, 0x9e, 0xc3, 0x22, 0x71, 0xdf, 0x51, 0x2e, 0x7d, 0x61, 0x58, 0xe6, 0x81, 0xee, 0xaa,
	0xbc, 0x52, 0xcd, 0x34, 0x97, 0xb5, 0x99, 0xec, 0x73, 0xe2, 0x9c, 0xdb, 0xab, 0x3a, 0xa8, 0x8c,
	0x46, 0xc5, 0x44, 0xdc, 0x63, 0xca, 0x35, 0x87, 0x7d, 0x56, 0x2b, 0xac, 0x2f, 0xdd, 0x14, 0xd3,
	0xf6, 0xc8, 0x14, 0xa7, 0x5e, 0xaa, 0xe7, 0x05, 0x0b, 0xdc, 0x5e, 0xc0, 0xa4, 0xfd, 0x50, 0x6f,
	0x30, 0x96, 0x75, 0x52, 0xbd, 0x90, 0xf1, 0x64, 0xee, 0x3e, 0x4a, 0x92, 0x9a, 0xaa, 0x26, 0x58,
	0xbd, 0x74, 0x2f, 0x56, 0xa7, 0x19, 0x56, 0x9f, 0xff, 0x10, 0x56, 0xcf, 0x38, 0xa2, 0x97, 0xb0,
	0x72, 0x42, 0x85, 0x3c, 0x24, 0xd2, 0x39, 0xdb, 0x23, 0x41, 0x70, 0xa2, 0x52, 0x57, 0xd7, 0xd9,
	0x9d, 0x5c, 0x40, 0xbf, 0x80, 0xf9, 0xb3, 0xc8, 0x84, 0xf7, 0xd5, 0xed, 0x43, 0x68, 0x64, 0xbb,
	0xf6, 0x2d, 0x54, 0x33, 0x5d, 0x88, 0x2c, 0x98, 0x3d, 0xa7, 0x97, 0x9a, 0x8e, 0x2b, 0x58, 0xfd,
	0x44, 0xab, 0x50, 0x7c, 0xa7, 0x5c, 0x12, 0x8e, 0x35, 0xc2, 0xaf, 0x66, 0x7e, 0x59, 0xa8, 0xff,
	0xab, 0x02, 0x8f, 0xba, 0xe6, 0x75, 0xfb, 0x7f, 0x4c, 0xef, 0x7f, 0x02, 0x20, 0x51, 0x33, 0x79,
	0xae, 0x24, 0xad, 0xf7, 0xdd, 0xf4, 0x62, 0x4d, 0x09, 0xb8, 0xb1, 0xdd, 0x1d, 0x61, 0xe0, 0x0c,
	0x1e, 0x6a, 0x4f, 0x3c, 0x1e, 0x36, 0x6f, 0xc5, 0xfe, 0xb0, 0x37, 0x44, 0xe9, 0x0e, 0x6f, 0x88,
	0xf9, 0x9b, 0xde, 0x10, 0xe5, 0xfc, 0x1b, 0x22, 0x4b, 0xb2, 0x95, 0x4f, 0x48, 0xb2, 0xf0, 0x3f,
	0x40, 0xb2, 0x0b, 0xb7, 0x90, 0xec, 0xe2, 0x07, 0x91, 0x6c, 0x4a, 0xa4, 0x4b, 0x39, 0x22, 0x9d,
	0xa4, 0x98, 0xe5, 0xfb, 0x51, 0xcc, 0x15, 0x4a, 0xb0, 0x26, 0x29, 0x81, 0xc2, 0x62, 0xec, 0xab,
	0x24, 0x8d, 0x18, 0x79, 0x45, 0x47, 0xf2, 0xdb, 0xdb, 0xb8, 0x28, 0xe9, 0xb8, 0x31, 0x23, 0xbf,
	0x6a, 0x1c, 0xb5, 0x32, 0x30, 0x38, 0x8f, 0x3a, 0x31, 0x24, 0x1f, 0x7c, 0xb2, 0x21, 0xb9, 0xfa,
	0x91, 0x43, 0xb2, 0xbe, 0x0f, 0x90, 0x5e, 0x3d, 0x54, 0x85, 0xf9, 0xa3, 0xf0, 0x3c, 0x64, 0xef,
	0x43, 0xeb, 0x47, 0x68, 0x1e, 0x66, 0xb7, 0x83, 0xc0, 0x2a, 0x20, 0x80, 0xd2, 0x21, 0x3b, 0xf1,
	0x03, 0x6a, 0xcd, 0xa8, 0xdf, 0x07, 0xf1, 0x45, 0xcc, 0x2f, 0xad, 0x59, 0x65, 0xdd, 0x0b, 0x29,
	0x39, 0xa7, 0xdc, 0x9a, 0xab, 0x7f, 0x0f, 0x68, 0xb2, 0x9b, 0x55, 0x8d, 0x75, 0x3f, 0xbb, 0xc9,
	0x48, 0x4c, 0x24, 0x35, 0x7d, 0xd2, 0xb6, 0x31, 0xe3, 0x29, 0xd3, 0x19, 0xab, 0x50, 0x24, 0xee,
	0xd0, 0x0f, 0xf5, 0x5c, 0x2a, 0x63, 0x23, 0xd4, 0xff, 0x5a, 0x80, 0xd5, 0xeb, 0x9a, 0x5c, 0x81,
	0x89, 0xf1, 0x98, 0x32, 0xfb, 0xa4, 0x0a, 0xb5, 0xca, 0x4d, 0x79, 0xd2, 0xad, 0xc6, 0x0a, 0xb5,
	0xd5, 0x49, 0xec, 0x07, 0xe6, 0x6b, 0xbc, 0x88, 0x8d, 0x90, 0x7b, 0xff, 0xcd, 0xe5, 0xdf, 0x7f,
	0xf5, 0x7f, 0xce, 0xc0, 0xca, 0xc4, 0x88, 0x51, 0x0f, 0xac, 0x64, 0xc8, 0xf4, 0x2f, 0x23, 0xaa,
	0x4f, 0xb1, 0x74, 0x53, 0x65, 0x9b, 0xa9, 0x31, 0xce, 0x7a, 0xaa, 0x03, 0xf9, 0xfa, 0x53, 0x71,
	0xc6, 0x1c, 0x48, 0x0b, 0xf9, 0xef, 0xd0, 0xd9, 0xab, 0xdf, 0xa1, 0x35, 0xa8, 0x46, 0x9c, 0x0d,
	0x99, 0xcc, 0x4e, 0xea, 0xac, 0x4a, 0x93, 0x3b, 0x0d, 0x02, 0x5d, 0x89, 0xa2, 0x09, 0x68, 0x24,
	0xab, 0x1a, 0x09, 0x49, 0x64, 0x2c, 0xf4, 0x2c, 0xac, 0xe0, 0x44, 0xd2, 0x5f, 0xa6, 0xbe, 0xf4,
	0xff, 0x4c, 0x43, 0x71, 0xe6, 0x47, 0x7a, 0x08, 0xaa, 0x2f, 0xd3, 0x54, 0xa5, 0xff, 0xa3, 0x41,
	0xc2, 0x73, 0x3f, 0xf4, 0x7a, 0xce, 0x68, 0x14, 0x56, 0x70, 0x4e, 0xa7, 0x26, 0x25, 0xbd, 0x88,
	0x02, 0xe2, 0x87, 0xc9, 0xf7, 0xf3, 0x48, 0xac, 0xff, 0x6d, 0x06, 0xec, 0x69, 0x23, 0x1b, 0xb5,
	0xaf, 0xcb, 0xe7, 0xcb, 0x5b, 0x67, 0xff, 0x07, 0xa6, 0xf5, 0x05, 0x58, 0x2e, 0x3d, 0x25, 0x71,
	0x20, 0x0f, 0xae, 0x64, 0x77, 0x42, 0xaf, 0xd3, 0xe1, 0x8d, 0xce, 0x3b, 0x4e, 0x72, 0x46, 0x85,
	0x1a, 0x80, 0xc6, 0xe2, 0x31, 0xe1, 0x3e, 0x09, 0xe5, 0x38, 0xdd, 0xd7, 0xac, 0x64, 0x53, 0x53,
	0xca, 0xa5, 0xe6, 0xc5, 0x3f, 0x0a, 0x50, 0xcd, 0x84, 0x92, 0xbf, 0x97, 0x16, 0x2c, 0x1c, 0xb4,
	0x7a, 0xfd, 0x56, 0x7b, 0x7f, 0xd0, 0xdc, 0xc6, 0x3b, 0x56, 0x01, 0xad, 0x82, 0xf5, 0xe6, 0xe8,
	0xb0, 0x3b, 0xe8, 0x77, 0x8e, 0x9a, 0x6f, 0x07, 0xdd, 0x4e, 0xab, 0xdd, 0xb7, 0x66, 0xd0, 0x67,
	0xb0, 0xd2, 0xc5, 0x9d, 0xbd, 0xd6, 0xc1, 0xee, 0xa0, 0x8b, 0x3b, 0x87, 0x9d, 0x7e, 0xab, 0xd3,
	0xb6, 0x66, 0xd1, 0x32, 0x54, 0x8d, 0xb8, 0xbb, 0x33, 0x78, 0xf5, 0x73, 0x6b, 0x4e, 0x79, 0xf7,
	0x3b, 0xdd, 0x41, 0xaf, 0xdb, 0xe9, 0x1f, 0xb4, 0xf6, 0xdf, 0xf6, 0x95, 0xb6, 0xa8, 0x2e, 0xfa,
	0x9b, 0xed, 0x76, 0x7b, 0x17, 0x5b, 0x25, 0xf4, 0x0c, 0x1e, 0xef, 0xec, 0xee, 0xb4, 0x9a, 0xdb,
	0xca, 0x27, 0xb5, 0xeb, 0xed, 0x36, 0x35, 0xe6, 0x3c, 0x7a, 0x08, 0xa8, 0xf7, 0xb6, 0x73, 0xd4,
	0xef, 0x1c, 0xf5, 0x33, 0x7b, 0x95, 0x5f, 0xbc, 0x06, 0x34, 0x59, 0x18, 0x1d, 0x4d, 0xfb, 0x77,
	0xed, 0xce, 0x1f, 0xda, 0x26, 0x9a, 0x2e, 0xee, 0xec, 0x1c, 0x35, 0xfb, 0x49, 0x34, 0x6f, 0xba,
	0x7f, 0x6c, 0x7b, 0xbe, 0x3c, 0x8b, 0x4f, 0x1a, 0x0e, 0x1b, 0x6e, 0x38, 0x84, 0xb3, 0x58, 0xf5,
	0xea, 0x86, 0x38, 0x23, 0x9c, 0xba, 0x5f, 0xeb, 0x7a, 0x6f, 0x78, 0x34, 0xdc, 0xf0, 0xd8, 0x46,
	0xf6, 0x5f, 0x85, 0xbf, 0x9e, 0xd6, 0x1c, 0x27, 0x25, 0xfd, 0xe7, 0xf5, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xfc, 0x44, 0x7d, 0xf7, 0x03, 0x15, 0x00, 0x00,
}
